# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: Create Release

on:
  release:
    types: [published]

jobs:
  Publish:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        package:
        - SemanticKernel.Agents.Memory.Abstractions
        - SemanticKernel.Agents.Memory.Core
        - SemanticKernel.Agents.Memory.MCP
        - SemanticKernel.Agents.Memory.Plugin
        - SemanticKernel.Agents.Memory.Service

    steps:
    - uses: actions/checkout@v5
    - name: Setup .NET
      uses: actions/setup-dotnet@v5
      with:
        dotnet-version: 8.x

    - name: Setup package signing
      run: |
        if [ ! -z "$PACKAGE_SIGNING_CERTIFICATE" ]; then
          echo "Creating certificate from secret..."
          echo "$PACKAGE_SIGNING_CERTIFICATE" | base64 --decode > PackageSigning.pfx
          echo "Certificate created for signing"
        else
          echo "⚠️  No signing certificate found"
        fi

        if [ ! -z "$STRONGNAME_KEY" ]; then
          echo "Creating strong name key from secret..."
          echo "$STRONGNAME_KEY" | base64 --decode > StrongName.snk
          echo "Strong name key created"
        else
          echo "⚠️  No strong name key found - generating temporary key"
          ./scripts/generate-signing-certificate.sh
        fi
      env:
        PACKAGE_SIGNING_CERTIFICATE: ${{ secrets.PACKAGE_SIGNING_CERT_BASE64 }}
        STRONGNAME_KEY: ${{ secrets.STRONGNAME_KEY_BASE64 }}

    - name: Restore dependencies
      run: dotnet restore
      working-directory: ./

    - name: Extract numeric version
      id: extract_version
      run: |
        # Extract numeric version from tag (e.g., "0.0.1-beta02" -> "0.0.1.0")
        NUMERIC_VERSION=$(echo "${{ github.event.release.tag_name }}" | sed 's/-.*$//' | sed 's/$/\.0/')
        echo "numeric_version=$NUMERIC_VERSION" >> $GITHUB_OUTPUT
        echo "Full version: ${{ github.event.release.tag_name }}"
        echo "Numeric version: $NUMERIC_VERSION"

    - name: Build
      run: dotnet build --no-restore --configuration Release /p:Version=${{ github.event.release.tag_name }} /p:PackageVersion=${{ github.event.release.tag_name }} /p:AssemblyVersion=${{ steps.extract_version.outputs.numeric_version }} /p:FileVersion=${{ steps.extract_version.outputs.numeric_version }}
      working-directory: ./
      env:
        PackageCertificatePassword: ${{ secrets.PACKAGE_SIGNING_CERT_PASSWORD }}
    - name: Pack
      run: dotnet pack --no-build --configuration Release /p:Version=${{ github.event.release.tag_name }} /p:PackageVersion=${{ github.event.release.tag_name }} /p:SignPackage=false
      working-directory: ./
      env:
        PackageCertificatePassword: ${{ secrets.PACKAGE_SIGNING_CERT_PASSWORD }}
    - name: Sign packages
      run: |
        if [ ! -z "$PACKAGE_SIGNING_CERTIFICATE" ] && [ -f "PackageSigning.pfx" ]; then
          echo "Signing packages..."
          find . -name "${{ matrix.package }}.*.nupkg" -type f | while read package; do
            echo "Signing package: $package"
            dotnet nuget sign "$package" --certificate-path "PackageSigning.pfx" --certificate-password "$PackageCertificatePassword" --timestamper "http://timestamp.digicert.com"
          done
        else
          echo "⚠️  No signing certificate available - packages will not be signed"
        fi
      env:
        PACKAGE_SIGNING_CERTIFICATE: ${{ secrets.PACKAGE_SIGNING_CERT_BASE64 }}
        PackageCertificatePassword: ${{ secrets.PACKAGE_SIGNING_CERT_PASSWORD }}
    - name: Push to NuGet
      run: |
        dotnet nuget push **/${{ matrix.package }}.*.nupkg --source nuget.org --api-key $NUGET_API_KEY --skip-duplicate
      working-directory: ./
      env:
        NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}

    - name: Clean up certificates
      if: always()
      run: |
        rm -f PackageSigning.pfx StrongName.snk
