name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  DOTNET_VERSION: '8.0.x'
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore dependencies
      run: dotnet restore SemanticKernel.Agents.Memory.sln

    - name: Build solution
      run: dotnet build SemanticKernel.Agents.Memory.sln --no-restore --configuration Release

    - name: Run tests
      run: dotnet test SemanticKernel.Agents.Memory.sln --no-build --configuration Release --verbosity normal --logger trx --results-directory TestResults

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.os }}
        path: TestResults/*.trx

  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore SemanticKernel.Agents.Memory.sln

    - name: Build solution
      run: dotnet build SemanticKernel.Agents.Memory.sln --no-restore --configuration Release

    - name: Run tests with coverage
      run: dotnet test SemanticKernel.Agents.Memory.sln --no-build --configuration Release --collect:"XPlat Code Coverage" --results-directory ./coverage

    - name: Install ReportGenerator
      run: dotnet tool install -g dotnet-reportgenerator-globaltool

    - name: Generate coverage report
      run: reportgenerator -reports:"coverage/**/coverage.cobertura.xml" -targetdir:"coveragereport" -reporttypes:Html

    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coveragereport/

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore SemanticKernel.Agents.Memory.sln

    - name: Run security scan
      run: |
        dotnet list package --vulnerable --include-transitive 2>&1 | tee vulnerable-packages.txt
        if grep -q "has the following vulnerable packages" vulnerable-packages.txt; then
          echo "::error::Vulnerable packages found"
          cat vulnerable-packages.txt
          exit 1
        else
          echo "No vulnerable packages found"
        fi

  package-validation:
    name: Package Validation
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore SemanticKernel.Agents.Memory.sln

    - name: Build solution
      run: dotnet build SemanticKernel.Agents.Memory.sln --configuration Release

    - name: Setup package signing
      run: |
        if [ ! -z "$PACKAGE_SIGNING_CERTIFICATE" ]; then
          echo "Creating certificate from secret..."
          echo "$PACKAGE_SIGNING_CERTIFICATE" | base64 --decode > PackageSigning.pfx
          echo "Certificate created for signing"
        else
          echo "No signing certificate found in secrets"
        fi

        if [ ! -z "$STRONGNAME_KEY" ]; then
          echo "Creating strong name key from secret..."
          echo "$STRONGNAME_KEY" | base64 --decode > StrongName.snk
          echo "Strong name key created"
        else
          echo "No strong name key found in secrets."
        fi
      env:
        PACKAGE_SIGNING_CERTIFICATE: ${{ secrets.PACKAGE_SIGNING_CERT_BASE64 }}
        STRONGNAME_KEY: ${{ secrets.STRONGNAME_KEY_BASE64 }}

    - name: Build and pack with signing
      run: dotnet pack SemanticKernel.Agents.Memory.sln --configuration Release --output ./nupkgs
      env:
        PackageCertificatePassword: ${{ secrets.PACKAGE_SIGNING_PASSWORD }}

    - name: Upload packages
      uses: actions/upload-artifact@v4
      with:
        name: nuget-packages
        path: ./nupkgs/*.nupkg

    - name: Validate packages
      run: |
        echo "Validating signed packages..."
        for package in ./nupkgs/*.nupkg; do
          echo "Validating $package"
          if dotnet nuget verify "$package" --verbosity normal; then
            echo "‚úÖ Package $package is properly signed and valid"
          else
            echo "‚ö†Ô∏è  Package $package validation failed, checking if it's a signing issue..."
            # Check if it's just a signing issue or a more serious problem
            dotnet nuget verify "$package" --verbosity detailed 2>&1 | tee verify_output.txt
            if grep -q "NU3004" verify_output.txt; then
              echo "üìù Package $package is not signed (NU3004) - this may be expected for self-signed certificates"
            else
              echo "‚ùå Package $package has validation errors beyond signing"
              exit 1
            fi
          fi
        done

    - name: Clean up certificates
      if: always()
      run: |
        rm -f PackageSigning.pfx StrongName.snk verify_output.txt
